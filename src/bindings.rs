/* automatically generated by rust-bindgen 0.70.1 */

pub const __MINGW64_VERSION_MAJOR: u32 = 13;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1792;
pub const _WIN32_WINNT: u32 = 1537;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of localeinfo_struct"][::std::mem::size_of::<localeinfo_struct>() - 16usize];
    ["Alignment of localeinfo_struct"][::std::mem::align_of::<localeinfo_struct>() - 8usize];
    ["Offset of field: localeinfo_struct::locinfo"]
        [::std::mem::offset_of!(localeinfo_struct, locinfo) - 0usize];
    ["Offset of field: localeinfo_struct::mbcinfo"]
        [::std::mem::offset_of!(localeinfo_struct, mbcinfo) - 8usize];
};
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLC_ID"][::std::mem::size_of::<tagLC_ID>() - 6usize];
    ["Alignment of tagLC_ID"][::std::mem::align_of::<tagLC_ID>() - 2usize];
    ["Offset of field: tagLC_ID::wLanguage"][::std::mem::offset_of!(tagLC_ID, wLanguage) - 0usize];
    ["Offset of field: tagLC_ID::wCountry"][::std::mem::offset_of!(tagLC_ID, wCountry) - 2usize];
    ["Offset of field: tagLC_ID::wCodePage"][::std::mem::offset_of!(tagLC_ID, wCodePage) - 4usize];
};
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>() - 32usize];
    ["Alignment of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::locale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, locale) - 0usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wlocale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wlocale) - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, refcount) - 16usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wrefcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wrefcount) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct"][::std::mem::size_of::<threadlocaleinfostruct>() - 352usize];
    ["Alignment of threadlocaleinfostruct"]
        [::std::mem::align_of::<threadlocaleinfostruct>() - 8usize];
    ["Offset of field: threadlocaleinfostruct::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, refcount) - 0usize];
    ["Offset of field: threadlocaleinfostruct::lc_codepage"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_codepage) - 4usize];
    ["Offset of field: threadlocaleinfostruct::lc_collate_cp"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_collate_cp) - 8usize];
    ["Offset of field: threadlocaleinfostruct::lc_handle"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_handle) - 12usize];
    ["Offset of field: threadlocaleinfostruct::lc_id"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_id) - 36usize];
    ["Offset of field: threadlocaleinfostruct::lc_category"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_category) - 72usize];
    ["Offset of field: threadlocaleinfostruct::lc_clike"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_clike) - 264usize];
    ["Offset of field: threadlocaleinfostruct::mb_cur_max"]
        [::std::mem::offset_of!(threadlocaleinfostruct, mb_cur_max) - 268usize];
    ["Offset of field: threadlocaleinfostruct::lconv_intl_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_intl_refcount) - 272usize];
    ["Offset of field: threadlocaleinfostruct::lconv_num_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_num_refcount) - 280usize];
    ["Offset of field: threadlocaleinfostruct::lconv_mon_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_mon_refcount) - 288usize];
    ["Offset of field: threadlocaleinfostruct::lconv"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv) - 296usize];
    ["Offset of field: threadlocaleinfostruct::ctype1_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1_refcount) - 304usize];
    ["Offset of field: threadlocaleinfostruct::ctype1"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1) - 312usize];
    ["Offset of field: threadlocaleinfostruct::pctype"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pctype) - 320usize];
    ["Offset of field: threadlocaleinfostruct::pclmap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pclmap) - 328usize];
    ["Offset of field: threadlocaleinfostruct::pcumap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pcumap) - 336usize];
    ["Offset of field: threadlocaleinfostruct::lc_time_curr"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_time_curr) - 344usize];
};
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type ptr_t = *mut ::std::os::raw::c_void;
impl ME_SENSOR {
    pub const NUMBER_OF_SENSORS: ME_SENSOR = ME_SENSOR::SENSOR_ILR3800;
}
#[repr(u32)]
#[doc = "Enumerations\nIn function calls enumerations can be used textual or as number"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ME_SENSOR {
    NO_SENSOR = 0,
    SENSOR_ILR1171 = 69,
    SENSOR_ILR118x = 20,
    SENSOR_ILR1191 = 21,
    SENSOR_ILR2250 = 60,
    SENSOR_ILR3800 = 72,
    SENSOR_ILD1220 = 56,
    SENSOR_ILD1320 = 41,
    SENSOR_ILD1420 = 42,
    SENSOR_ILD1750 = 51,
    SENSOR_ILD1900 = 58,
    SENSOR_ILD2300 = 29,
    SENSOR_ILD5500 = 71,
    SENSOR_IFD2410 = 64,
    SENSOR_IFD2411 = 65,
    SENSOR_IFD2415 = 66,
    SENSOR_IFD2416 = 67,
    SENSOR_IFD2421 = 46,
    SENSOR_IFD2422 = 47,
    SENSOR_IFD2445 = 39,
    SENSOR_IFD2451 = 30,
    SENSOR_IFD2461 = 44,
    SENSOR_IFD2465 = 62,
    SENSOR_IFD2466 = 63,
    SENSOR_IFD2471 = 26,
    SENSOR_ODC2500 = 8,
    SENSOR_ODC2520 = 37,
    SENSOR_ODC2600 = 9,
    SENSOR_ODC2700 = 70,
    SENSOR_LLT27xx = 31,
    SENSOR_DT3060 = 50,
    SENSOR_DT3100 = 28,
    SENSOR_IMC5400 = 55,
    SENSOR_IMC5600 = 59,
    SENSOR_DT6120 = 40,
    CONTROLLER_DT6200 = 33,
    CONTROLLER_KSS64xx = 45,
    CONTROLLER_DT6500 = 15,
    SENSOR_ON_MEBUS = 43,
    PCI_CARD_IF2008 = 22,
    ETH_ADAPTER_IF2008 = 52,
    ETH_IF1032 = 34,
    USB_ADAPTER_IF2004 = 36,
    CONTROLLER_CBOX = 38,
    THICKNESS_SENSOR = 48,
    CONTROLLER_DPU = 68,
    SENSOR_ACS7000 = 35,
    SENSOR_CFO = 53,
    SENSOR_MFA = 61,
    SENSOR_GENERIC = 49,
    MULTI_SENSOR = 57,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ERR_CODE {
    ERR_NOERROR = 0,
    ERR_FUNCTION_NOT_SUPPORTED = -1,
    ERR_CANNOT_OPEN = -2,
    ERR_NOT_OPEN = -3,
    ERR_APPLYING_PARAMS = -4,
    ERR_SEND_CMD_TO_SENSOR = -5,
    ERR_CLEARING_BUFFER = -6,
    ERR_HW_COMMUNICATION = -7,
    ERR_TIMEOUT_READING_FROM_SENSOR = -8,
    ERR_READING_SENSOR_DATA = -9,
    ERR_INTERFACE_NOT_SUPPORTED = -10,
    ERR_ALREADY_OPEN = -11,
    ERR_CANNOT_CREATE_INTERFACE = -12,
    ERR_NO_SENSORDATA_AVAILABLE = -13,
    ERR_UNKNOWN_SENSOR_COMMAND = -14,
    ERR_UNKNOWN_SENSOR_ANSWER = -15,
    ERR_SENSOR_ANSWER_ERROR = -16,
    ERR_SENSOR_ANSWER_TOO_SHORT = -17,
    ERR_WRONG_PARAMETER = -18,
    ERR_NOMEMORY = -19,
    ERR_NO_ANSWER_RECEIVED = -20,
    ERR_SENSOR_ANSWER_DOES_NOT_MATCH_COMMAND = -21,
    ERR_BAUDRATE_TOO_LOW = -22,
    ERR_OVERFLOW = -23,
    ERR_INSTANCE_NOT_EXIST = -24,
    ERR_NOT_FOUND = -25,
    ERR_WARNING = -26,
    ERR_SENSOR_ANSWER_WARNING = -27,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
pub struct MEDAQLib {
    __library: ::libloading::Library,
    pub __mingw_get_crt_info:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub CreateSensorInstance:
        Result<unsafe extern "C" fn(sensorType: ME_SENSOR) -> u32, ::libloading::Error>,
    pub CreateSensorInstByName: Result<
        unsafe extern "C" fn(sensorName: *const ::std::os::raw::c_char) -> u32,
        ::libloading::Error,
    >,
    pub CreateSensorInstByNameU:
        Result<unsafe extern "C" fn(sensorName: *const wchar_t) -> u32, ::libloading::Error>,
    pub ReleaseSensorInstance:
        Result<unsafe extern "C" fn(instanceHandle: u32) -> ERR_CODE, ::libloading::Error>,
    pub SetParameterInt: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterDWORD_PTR: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: ptr_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterDouble: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterString: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *const ::std::os::raw::c_char,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterBinary: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *const u8,
            len: u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameters: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            parameterList: *const ::std::os::raw::c_char,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterIntU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterDWORD_PTRU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: ptr_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterDoubleU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterStringU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *const wchar_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParameterBinaryU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *const u8,
            len: u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetParametersU: Result<
        unsafe extern "C" fn(instanceHandle: u32, parameterList: *const wchar_t) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterInt: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterDWORD_PTR: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut ptr_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterDouble: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterString: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut ::std::os::raw::c_char,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterBinary: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut u8,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameters: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            parameterList: *mut ::std::os::raw::c_char,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterIntU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *mut i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterDWORD_PTRU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *mut ptr_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterDoubleU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *mut f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterStringU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *mut wchar_t,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParameterBinaryU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            paramName: *const wchar_t,
            paramValue: *mut u8,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetParametersU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            parameterList: *mut wchar_t,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ClearAllParameters:
        Result<unsafe extern "C" fn(instanceHandle: u32) -> ERR_CODE, ::libloading::Error>,
    pub OpenSensor:
        Result<unsafe extern "C" fn(instanceHandle: u32) -> ERR_CODE, ::libloading::Error>,
    pub CloseSensor:
        Result<unsafe extern "C" fn(instanceHandle: u32) -> ERR_CODE, ::libloading::Error>,
    pub SensorCommand:
        Result<unsafe extern "C" fn(instanceHandle: u32) -> ERR_CODE, ::libloading::Error>,
    pub DataAvail: Result<
        unsafe extern "C" fn(instanceHandle: u32, avail: *mut i32) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub TransferData: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            rawData: *mut i32,
            scaledData: *mut f64,
            maxValues: i32,
            read: *mut i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub TransferDataTS: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            rawData: *mut i32,
            scaledData: *mut f64,
            maxValues: i32,
            read: *mut i32,
            timestamp: *mut f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub Poll: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            rawData: *mut i32,
            scaledData: *mut f64,
            maxValues: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetError: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            errText: *mut ::std::os::raw::c_char,
            maxLen: u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetErrorU: Result<
        unsafe extern "C" fn(instanceHandle: u32, errText: *mut wchar_t, maxLen: u32) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetDLLVersion: Result<
        unsafe extern "C" fn(versionStr: *mut ::std::os::raw::c_char, maxLen: u32) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub GetDLLVersionU: Result<
        unsafe extern "C" fn(versionStr: *mut wchar_t, maxLen: u32) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub EnableLogging: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            enableLogging: i32,
            logTypes: i32,
            logLevels: i32,
            logFile: *const ::std::os::raw::c_char,
            logAppend: i32,
            logFlush: i32,
            logSplitSize: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub EnableLoggingU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            enableLogging: i32,
            logTypes: i32,
            logLevels: i32,
            logFile: *const wchar_t,
            logAppend: i32,
            logFlush: i32,
            logSplitSize: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub LogToFile: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            logLevel: i32,
            location: *const ::std::os::raw::c_char,
            message: *const ::std::os::raw::c_char,
            ...
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub LogToFileU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            logLevel: i32,
            location: *const wchar_t,
            message: *const wchar_t,
            ...
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorRS232: Result<
        unsafe extern "C" fn(instanceHandle: u32, port: *const ::std::os::raw::c_char) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorIF2004_USB: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            deviceInstance: i32,
            serialNumber: *const ::std::os::raw::c_char,
            port: *const ::std::os::raw::c_char,
            channelNumber: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorIF2008: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            cardInstance: i32,
            channelNumber: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorIF2008_ETH: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            remoteAddr: *const ::std::os::raw::c_char,
            channelNumber: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorTCPIP: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            remoteAddr: *const ::std::os::raw::c_char,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorWinUSB: Result<
        unsafe extern "C" fn(instanceHandle: u32, deviceInstance: i32) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorRS232U: Result<
        unsafe extern "C" fn(instanceHandle: u32, port: *const wchar_t) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorIF2004_USBU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            deviceInstance: i32,
            serialNumber: *const wchar_t,
            port: *const wchar_t,
            channelNumber: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorIF2008_ETHU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            remoteAddr: *const wchar_t,
            channelNumber: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub OpenSensorTCPIPU: Result<
        unsafe extern "C" fn(instanceHandle: u32, remoteAddr: *const wchar_t) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmd: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetIntExecSCmd: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetDoubleExecSCmd: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetStringExecSCmd: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *const ::std::os::raw::c_char,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetInt: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetDouble: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetString: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const ::std::os::raw::c_char,
            paramName: *const ::std::os::raw::c_char,
            paramValue: *mut ::std::os::raw::c_char,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdU: Result<
        unsafe extern "C" fn(instanceHandle: u32, sensorCommand: *const wchar_t) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetIntExecSCmdU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetDoubleExecSCmdU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub SetStringExecSCmdU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: *const wchar_t,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetIntU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: *mut i32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetDoubleU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: *mut f64,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
    pub ExecSCmdGetStringU: Result<
        unsafe extern "C" fn(
            instanceHandle: u32,
            sensorCommand: *const wchar_t,
            paramName: *const wchar_t,
            paramValue: *mut wchar_t,
            maxLen: *mut u32,
        ) -> ERR_CODE,
        ::libloading::Error,
    >,
}
impl MEDAQLib {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let __mingw_get_crt_info = __library.get(b"__mingw_get_crt_info\0").map(|sym| *sym);
        let CreateSensorInstance = __library.get(b"CreateSensorInstance\0").map(|sym| *sym);
        let CreateSensorInstByName = __library.get(b"CreateSensorInstByName\0").map(|sym| *sym);
        let CreateSensorInstByNameU = __library.get(b"CreateSensorInstByNameU\0").map(|sym| *sym);
        let ReleaseSensorInstance = __library.get(b"ReleaseSensorInstance\0").map(|sym| *sym);
        let SetParameterInt = __library.get(b"SetParameterInt\0").map(|sym| *sym);
        let SetParameterDWORD_PTR = __library.get(b"SetParameterDWORD_PTR\0").map(|sym| *sym);
        let SetParameterDouble = __library.get(b"SetParameterDouble\0").map(|sym| *sym);
        let SetParameterString = __library.get(b"SetParameterString\0").map(|sym| *sym);
        let SetParameterBinary = __library.get(b"SetParameterBinary\0").map(|sym| *sym);
        let SetParameters = __library.get(b"SetParameters\0").map(|sym| *sym);
        let SetParameterIntU = __library.get(b"SetParameterIntU\0").map(|sym| *sym);
        let SetParameterDWORD_PTRU = __library.get(b"SetParameterDWORD_PTRU\0").map(|sym| *sym);
        let SetParameterDoubleU = __library.get(b"SetParameterDoubleU\0").map(|sym| *sym);
        let SetParameterStringU = __library.get(b"SetParameterStringU\0").map(|sym| *sym);
        let SetParameterBinaryU = __library.get(b"SetParameterBinaryU\0").map(|sym| *sym);
        let SetParametersU = __library.get(b"SetParametersU\0").map(|sym| *sym);
        let GetParameterInt = __library.get(b"GetParameterInt\0").map(|sym| *sym);
        let GetParameterDWORD_PTR = __library.get(b"GetParameterDWORD_PTR\0").map(|sym| *sym);
        let GetParameterDouble = __library.get(b"GetParameterDouble\0").map(|sym| *sym);
        let GetParameterString = __library.get(b"GetParameterString\0").map(|sym| *sym);
        let GetParameterBinary = __library.get(b"GetParameterBinary\0").map(|sym| *sym);
        let GetParameters = __library.get(b"GetParameters\0").map(|sym| *sym);
        let GetParameterIntU = __library.get(b"GetParameterIntU\0").map(|sym| *sym);
        let GetParameterDWORD_PTRU = __library.get(b"GetParameterDWORD_PTRU\0").map(|sym| *sym);
        let GetParameterDoubleU = __library.get(b"GetParameterDoubleU\0").map(|sym| *sym);
        let GetParameterStringU = __library.get(b"GetParameterStringU\0").map(|sym| *sym);
        let GetParameterBinaryU = __library.get(b"GetParameterBinaryU\0").map(|sym| *sym);
        let GetParametersU = __library.get(b"GetParametersU\0").map(|sym| *sym);
        let ClearAllParameters = __library.get(b"ClearAllParameters\0").map(|sym| *sym);
        let OpenSensor = __library.get(b"OpenSensor\0").map(|sym| *sym);
        let CloseSensor = __library.get(b"CloseSensor\0").map(|sym| *sym);
        let SensorCommand = __library.get(b"SensorCommand\0").map(|sym| *sym);
        let DataAvail = __library.get(b"DataAvail\0").map(|sym| *sym);
        let TransferData = __library.get(b"TransferData\0").map(|sym| *sym);
        let TransferDataTS = __library.get(b"TransferDataTS\0").map(|sym| *sym);
        let Poll = __library.get(b"Poll\0").map(|sym| *sym);
        let GetError = __library.get(b"GetError\0").map(|sym| *sym);
        let GetErrorU = __library.get(b"GetErrorU\0").map(|sym| *sym);
        let GetDLLVersion = __library.get(b"GetDLLVersion\0").map(|sym| *sym);
        let GetDLLVersionU = __library.get(b"GetDLLVersionU\0").map(|sym| *sym);
        let EnableLogging = __library.get(b"EnableLogging\0").map(|sym| *sym);
        let EnableLoggingU = __library.get(b"EnableLoggingU\0").map(|sym| *sym);
        let LogToFile = __library.get(b"LogToFile\0").map(|sym| *sym);
        let LogToFileU = __library.get(b"LogToFileU\0").map(|sym| *sym);
        let OpenSensorRS232 = __library.get(b"OpenSensorRS232\0").map(|sym| *sym);
        let OpenSensorIF2004_USB = __library.get(b"OpenSensorIF2004_USB\0").map(|sym| *sym);
        let OpenSensorIF2008 = __library.get(b"OpenSensorIF2008\0").map(|sym| *sym);
        let OpenSensorIF2008_ETH = __library.get(b"OpenSensorIF2008_ETH\0").map(|sym| *sym);
        let OpenSensorTCPIP = __library.get(b"OpenSensorTCPIP\0").map(|sym| *sym);
        let OpenSensorWinUSB = __library.get(b"OpenSensorWinUSB\0").map(|sym| *sym);
        let OpenSensorRS232U = __library.get(b"OpenSensorRS232U\0").map(|sym| *sym);
        let OpenSensorIF2004_USBU = __library.get(b"OpenSensorIF2004_USBU\0").map(|sym| *sym);
        let OpenSensorIF2008_ETHU = __library.get(b"OpenSensorIF2008_ETHU\0").map(|sym| *sym);
        let OpenSensorTCPIPU = __library.get(b"OpenSensorTCPIPU\0").map(|sym| *sym);
        let ExecSCmd = __library.get(b"ExecSCmd\0").map(|sym| *sym);
        let SetIntExecSCmd = __library.get(b"SetIntExecSCmd\0").map(|sym| *sym);
        let SetDoubleExecSCmd = __library.get(b"SetDoubleExecSCmd\0").map(|sym| *sym);
        let SetStringExecSCmd = __library.get(b"SetStringExecSCmd\0").map(|sym| *sym);
        let ExecSCmdGetInt = __library.get(b"ExecSCmdGetInt\0").map(|sym| *sym);
        let ExecSCmdGetDouble = __library.get(b"ExecSCmdGetDouble\0").map(|sym| *sym);
        let ExecSCmdGetString = __library.get(b"ExecSCmdGetString\0").map(|sym| *sym);
        let ExecSCmdU = __library.get(b"ExecSCmdU\0").map(|sym| *sym);
        let SetIntExecSCmdU = __library.get(b"SetIntExecSCmdU\0").map(|sym| *sym);
        let SetDoubleExecSCmdU = __library.get(b"SetDoubleExecSCmdU\0").map(|sym| *sym);
        let SetStringExecSCmdU = __library.get(b"SetStringExecSCmdU\0").map(|sym| *sym);
        let ExecSCmdGetIntU = __library.get(b"ExecSCmdGetIntU\0").map(|sym| *sym);
        let ExecSCmdGetDoubleU = __library.get(b"ExecSCmdGetDoubleU\0").map(|sym| *sym);
        let ExecSCmdGetStringU = __library.get(b"ExecSCmdGetStringU\0").map(|sym| *sym);
        Ok(MEDAQLib {
            __library,
            __mingw_get_crt_info,
            CreateSensorInstance,
            CreateSensorInstByName,
            CreateSensorInstByNameU,
            ReleaseSensorInstance,
            SetParameterInt,
            SetParameterDWORD_PTR,
            SetParameterDouble,
            SetParameterString,
            SetParameterBinary,
            SetParameters,
            SetParameterIntU,
            SetParameterDWORD_PTRU,
            SetParameterDoubleU,
            SetParameterStringU,
            SetParameterBinaryU,
            SetParametersU,
            GetParameterInt,
            GetParameterDWORD_PTR,
            GetParameterDouble,
            GetParameterString,
            GetParameterBinary,
            GetParameters,
            GetParameterIntU,
            GetParameterDWORD_PTRU,
            GetParameterDoubleU,
            GetParameterStringU,
            GetParameterBinaryU,
            GetParametersU,
            ClearAllParameters,
            OpenSensor,
            CloseSensor,
            SensorCommand,
            DataAvail,
            TransferData,
            TransferDataTS,
            Poll,
            GetError,
            GetErrorU,
            GetDLLVersion,
            GetDLLVersionU,
            EnableLogging,
            EnableLoggingU,
            LogToFile,
            LogToFileU,
            OpenSensorRS232,
            OpenSensorIF2004_USB,
            OpenSensorIF2008,
            OpenSensorIF2008_ETH,
            OpenSensorTCPIP,
            OpenSensorWinUSB,
            OpenSensorRS232U,
            OpenSensorIF2004_USBU,
            OpenSensorIF2008_ETHU,
            OpenSensorTCPIPU,
            ExecSCmd,
            SetIntExecSCmd,
            SetDoubleExecSCmd,
            SetStringExecSCmd,
            ExecSCmdGetInt,
            ExecSCmdGetDouble,
            ExecSCmdGetString,
            ExecSCmdU,
            SetIntExecSCmdU,
            SetDoubleExecSCmdU,
            SetStringExecSCmdU,
            ExecSCmdGetIntU,
            ExecSCmdGetDoubleU,
            ExecSCmdGetStringU,
        })
    }
    pub unsafe fn __mingw_get_crt_info(&self) -> *const ::std::os::raw::c_char {
        (self
            .__mingw_get_crt_info
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CreateSensorInstance(&self, sensorType: ME_SENSOR) -> u32 {
        (self
            .CreateSensorInstance
            .as_ref()
            .expect("Expected function, got error."))(sensorType)
    }
    pub unsafe fn CreateSensorInstByName(&self, sensorName: *const ::std::os::raw::c_char) -> u32 {
        (self
            .CreateSensorInstByName
            .as_ref()
            .expect("Expected function, got error."))(sensorName)
    }
    pub unsafe fn CreateSensorInstByNameU(&self, sensorName: *const wchar_t) -> u32 {
        (self
            .CreateSensorInstByNameU
            .as_ref()
            .expect("Expected function, got error."))(sensorName)
    }
    pub unsafe fn ReleaseSensorInstance(&self, instanceHandle: u32) -> ERR_CODE {
        (self
            .ReleaseSensorInstance
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle)
    }
    pub unsafe fn SetParameterInt(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: i32,
    ) -> ERR_CODE {
        (self
            .SetParameterInt
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterDWORD_PTR(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: ptr_t,
    ) -> ERR_CODE {
        (self
            .SetParameterDWORD_PTR
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterDouble(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: f64,
    ) -> ERR_CODE {
        (self
            .SetParameterDouble
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterString(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .SetParameterString
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterBinary(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const u8,
        len: u32,
    ) -> ERR_CODE {
        (self
            .SetParameterBinary
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, len
        )
    }
    pub unsafe fn SetParameters(
        &self,
        instanceHandle: u32,
        parameterList: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .SetParameters
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, parameterList)
    }
    pub unsafe fn SetParameterIntU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: i32,
    ) -> ERR_CODE {
        (self
            .SetParameterIntU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterDWORD_PTRU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: ptr_t,
    ) -> ERR_CODE {
        (self
            .SetParameterDWORD_PTRU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterDoubleU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: f64,
    ) -> ERR_CODE {
        (self
            .SetParameterDoubleU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterStringU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *const wchar_t,
    ) -> ERR_CODE {
        (self
            .SetParameterStringU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn SetParameterBinaryU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *const u8,
        len: u32,
    ) -> ERR_CODE {
        (self
            .SetParameterBinaryU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, len
        )
    }
    pub unsafe fn SetParametersU(
        &self,
        instanceHandle: u32,
        parameterList: *const wchar_t,
    ) -> ERR_CODE {
        (self
            .SetParametersU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, parameterList)
    }
    pub unsafe fn GetParameterInt(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut i32,
    ) -> ERR_CODE {
        (self
            .GetParameterInt
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterDWORD_PTR(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ptr_t,
    ) -> ERR_CODE {
        (self
            .GetParameterDWORD_PTR
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterDouble(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut f64,
    ) -> ERR_CODE {
        (self
            .GetParameterDouble
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterString(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParameterString
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, maxLen
        )
    }
    pub unsafe fn GetParameterBinary(
        &self,
        instanceHandle: u32,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut u8,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParameterBinary
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, maxLen
        )
    }
    pub unsafe fn GetParameters(
        &self,
        instanceHandle: u32,
        parameterList: *mut ::std::os::raw::c_char,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParameters
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, parameterList, maxLen)
    }
    pub unsafe fn GetParameterIntU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *mut i32,
    ) -> ERR_CODE {
        (self
            .GetParameterIntU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterDWORD_PTRU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *mut ptr_t,
    ) -> ERR_CODE {
        (self
            .GetParameterDWORD_PTRU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterDoubleU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *mut f64,
    ) -> ERR_CODE {
        (self
            .GetParameterDoubleU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, paramName, paramValue)
    }
    pub unsafe fn GetParameterStringU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *mut wchar_t,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParameterStringU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, maxLen
        )
    }
    pub unsafe fn GetParameterBinaryU(
        &self,
        instanceHandle: u32,
        paramName: *const wchar_t,
        paramValue: *mut u8,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParameterBinaryU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, paramName, paramValue, maxLen
        )
    }
    pub unsafe fn GetParametersU(
        &self,
        instanceHandle: u32,
        parameterList: *mut wchar_t,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .GetParametersU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, parameterList, maxLen)
    }
    pub unsafe fn ClearAllParameters(&self, instanceHandle: u32) -> ERR_CODE {
        (self
            .ClearAllParameters
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle)
    }
    pub unsafe fn OpenSensor(&self, instanceHandle: u32) -> ERR_CODE {
        (self
            .OpenSensor
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle)
    }
    pub unsafe fn CloseSensor(&self, instanceHandle: u32) -> ERR_CODE {
        (self
            .CloseSensor
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle)
    }
    pub unsafe fn SensorCommand(&self, instanceHandle: u32) -> ERR_CODE {
        (self
            .SensorCommand
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle)
    }
    pub unsafe fn DataAvail(&self, instanceHandle: u32, avail: *mut i32) -> ERR_CODE {
        (self
            .DataAvail
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, avail)
    }
    pub unsafe fn TransferData(
        &self,
        instanceHandle: u32,
        rawData: *mut i32,
        scaledData: *mut f64,
        maxValues: i32,
        read: *mut i32,
    ) -> ERR_CODE {
        (self
            .TransferData
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            rawData,
            scaledData,
            maxValues,
            read,
        )
    }
    pub unsafe fn TransferDataTS(
        &self,
        instanceHandle: u32,
        rawData: *mut i32,
        scaledData: *mut f64,
        maxValues: i32,
        read: *mut i32,
        timestamp: *mut f64,
    ) -> ERR_CODE {
        (self
            .TransferDataTS
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            rawData,
            scaledData,
            maxValues,
            read,
            timestamp,
        )
    }
    pub unsafe fn Poll(
        &self,
        instanceHandle: u32,
        rawData: *mut i32,
        scaledData: *mut f64,
        maxValues: i32,
    ) -> ERR_CODE {
        (self.Poll.as_ref().expect("Expected function, got error."))(
            instanceHandle,
            rawData,
            scaledData,
            maxValues,
        )
    }
    pub unsafe fn GetError(
        &self,
        instanceHandle: u32,
        errText: *mut ::std::os::raw::c_char,
        maxLen: u32,
    ) -> ERR_CODE {
        (self
            .GetError
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, errText, maxLen)
    }
    pub unsafe fn GetErrorU(
        &self,
        instanceHandle: u32,
        errText: *mut wchar_t,
        maxLen: u32,
    ) -> ERR_CODE {
        (self
            .GetErrorU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, errText, maxLen)
    }
    pub unsafe fn GetDLLVersion(
        &self,
        versionStr: *mut ::std::os::raw::c_char,
        maxLen: u32,
    ) -> ERR_CODE {
        (self
            .GetDLLVersion
            .as_ref()
            .expect("Expected function, got error."))(versionStr, maxLen)
    }
    pub unsafe fn GetDLLVersionU(&self, versionStr: *mut wchar_t, maxLen: u32) -> ERR_CODE {
        (self
            .GetDLLVersionU
            .as_ref()
            .expect("Expected function, got error."))(versionStr, maxLen)
    }
    pub unsafe fn EnableLogging(
        &self,
        instanceHandle: u32,
        enableLogging: i32,
        logTypes: i32,
        logLevels: i32,
        logFile: *const ::std::os::raw::c_char,
        logAppend: i32,
        logFlush: i32,
        logSplitSize: i32,
    ) -> ERR_CODE {
        (self
            .EnableLogging
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            enableLogging,
            logTypes,
            logLevels,
            logFile,
            logAppend,
            logFlush,
            logSplitSize,
        )
    }
    pub unsafe fn EnableLoggingU(
        &self,
        instanceHandle: u32,
        enableLogging: i32,
        logTypes: i32,
        logLevels: i32,
        logFile: *const wchar_t,
        logAppend: i32,
        logFlush: i32,
        logSplitSize: i32,
    ) -> ERR_CODE {
        (self
            .EnableLoggingU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            enableLogging,
            logTypes,
            logLevels,
            logFile,
            logAppend,
            logFlush,
            logSplitSize,
        )
    }
    pub unsafe fn OpenSensorRS232(
        &self,
        instanceHandle: u32,
        port: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .OpenSensorRS232
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, port)
    }
    pub unsafe fn OpenSensorIF2004_USB(
        &self,
        instanceHandle: u32,
        deviceInstance: i32,
        serialNumber: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        channelNumber: i32,
    ) -> ERR_CODE {
        (self
            .OpenSensorIF2004_USB
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            deviceInstance,
            serialNumber,
            port,
            channelNumber,
        )
    }
    pub unsafe fn OpenSensorIF2008(
        &self,
        instanceHandle: u32,
        cardInstance: i32,
        channelNumber: i32,
    ) -> ERR_CODE {
        (self
            .OpenSensorIF2008
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, cardInstance, channelNumber
        )
    }
    pub unsafe fn OpenSensorIF2008_ETH(
        &self,
        instanceHandle: u32,
        remoteAddr: *const ::std::os::raw::c_char,
        channelNumber: i32,
    ) -> ERR_CODE {
        (self
            .OpenSensorIF2008_ETH
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, remoteAddr, channelNumber
        )
    }
    pub unsafe fn OpenSensorTCPIP(
        &self,
        instanceHandle: u32,
        remoteAddr: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .OpenSensorTCPIP
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, remoteAddr)
    }
    pub unsafe fn OpenSensorWinUSB(&self, instanceHandle: u32, deviceInstance: i32) -> ERR_CODE {
        (self
            .OpenSensorWinUSB
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, deviceInstance)
    }
    pub unsafe fn OpenSensorRS232U(&self, instanceHandle: u32, port: *const wchar_t) -> ERR_CODE {
        (self
            .OpenSensorRS232U
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, port)
    }
    pub unsafe fn OpenSensorIF2004_USBU(
        &self,
        instanceHandle: u32,
        deviceInstance: i32,
        serialNumber: *const wchar_t,
        port: *const wchar_t,
        channelNumber: i32,
    ) -> ERR_CODE {
        (self
            .OpenSensorIF2004_USBU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            deviceInstance,
            serialNumber,
            port,
            channelNumber,
        )
    }
    pub unsafe fn OpenSensorIF2008_ETHU(
        &self,
        instanceHandle: u32,
        remoteAddr: *const wchar_t,
        channelNumber: i32,
    ) -> ERR_CODE {
        (self
            .OpenSensorIF2008_ETHU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle, remoteAddr, channelNumber
        )
    }
    pub unsafe fn OpenSensorTCPIPU(
        &self,
        instanceHandle: u32,
        remoteAddr: *const wchar_t,
    ) -> ERR_CODE {
        (self
            .OpenSensorTCPIPU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, remoteAddr)
    }
    pub unsafe fn ExecSCmd(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .ExecSCmd
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, sensorCommand)
    }
    pub unsafe fn SetIntExecSCmd(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: i32,
    ) -> ERR_CODE {
        (self
            .SetIntExecSCmd
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn SetDoubleExecSCmd(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: f64,
    ) -> ERR_CODE {
        (self
            .SetDoubleExecSCmd
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn SetStringExecSCmd(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *const ::std::os::raw::c_char,
    ) -> ERR_CODE {
        (self
            .SetStringExecSCmd
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetInt(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut i32,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetInt
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetDouble(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut f64,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetDouble
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetString(
        &self,
        instanceHandle: u32,
        sensorCommand: *const ::std::os::raw::c_char,
        paramName: *const ::std::os::raw::c_char,
        paramValue: *mut ::std::os::raw::c_char,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetString
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
            maxLen,
        )
    }
    pub unsafe fn ExecSCmdU(&self, instanceHandle: u32, sensorCommand: *const wchar_t) -> ERR_CODE {
        (self
            .ExecSCmdU
            .as_ref()
            .expect("Expected function, got error."))(instanceHandle, sensorCommand)
    }
    pub unsafe fn SetIntExecSCmdU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: i32,
    ) -> ERR_CODE {
        (self
            .SetIntExecSCmdU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn SetDoubleExecSCmdU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: f64,
    ) -> ERR_CODE {
        (self
            .SetDoubleExecSCmdU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn SetStringExecSCmdU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: *const wchar_t,
    ) -> ERR_CODE {
        (self
            .SetStringExecSCmdU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetIntU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: *mut i32,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetIntU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetDoubleU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: *mut f64,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetDoubleU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
        )
    }
    pub unsafe fn ExecSCmdGetStringU(
        &self,
        instanceHandle: u32,
        sensorCommand: *const wchar_t,
        paramName: *const wchar_t,
        paramValue: *mut wchar_t,
        maxLen: *mut u32,
    ) -> ERR_CODE {
        (self
            .ExecSCmdGetStringU
            .as_ref()
            .expect("Expected function, got error."))(
            instanceHandle,
            sensorCommand,
            paramName,
            paramValue,
            maxLen,
        )
    }
}
